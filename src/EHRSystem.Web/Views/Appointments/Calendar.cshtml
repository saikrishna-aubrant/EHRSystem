@model CalendarViewModel
@{
    ViewData["Title"] = "Calendar";
    var minDate = DateTime.Today.AddDays(1).ToString("yyyy-MM-dd");
    var maxDate = DateTime.Today.AddMonths(3).ToString("yyyy-MM-dd");
}

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h3 class="mb-0">Appointment Calendar</h3>
        @if (User.IsInRole("Patient"))
        {
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#appointmentRequestModal">
                <i class="bi bi-plus-circle"></i> Request Appointment
            </button>
        }
    </div>
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="doctorFilter" class="form-label">Filter by Doctor:</label>
                <select id="doctorFilter" class="form-select">
                    <option value="">All Doctors</option>
                    @foreach (var schedule in Model.DoctorSchedules)
                    {
                        <option value="@schedule.DoctorId">@schedule.DoctorName</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label for="statusFilter" class="form-label">Filter by Status:</label>
                <select id="statusFilter" class="form-select">
                    <option value="">All Status</option>
                    <option value="available">Available</option>
                    <option value="requested">Requested</option>
                    <option value="confirmed">Confirmed</option>
                    <option value="cancelled">Cancelled</option>
                </select>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-12">
                <div class="legend">
                    <span class="badge bg-success">Available</span>
                    <span class="badge bg-warning text-dark">Requested</span>
                    <span class="badge bg-primary">Confirmed</span>
                    <span class="badge bg-danger">Cancelled</span>
                </div>
            </div>
        </div>

        <div id="calendar"></div>
    </div>
</div>

<!-- Appointment Request Modal -->
<div class="modal fade" id="appointmentRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Request Appointment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="appointmentRequestForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div id="errorMessage" class="alert alert-danger" style="display: none;"></div>
                    <div class="mb-3">
                        <label for="doctorId" class="form-label">Select Doctor</label>
                        <select id="doctorId" name="doctorId" class="form-select" required>
                            <option value="">Choose a doctor...</option>
                            @foreach (var schedule in Model.DoctorSchedules)
                            {
                                <option value="@schedule.DoctorId">@schedule.DoctorName</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="appointmentDate" class="form-label">Date</label>
                        <input type="date" id="appointmentDate" name="appointmentDate" class="form-control" 
                               required min="@minDate" max="@maxDate" />
                        <small class="form-text text-muted">Appointments can be scheduled from tomorrow up to 3 months in advance.</small>
                    </div>
                    <div class="mb-3">
                        <label for="timeSlot" class="form-label">Time Slot</label>
                        <select id="timeSlot" name="timeSlot" class="form-select" required>
                            <option value="">Select a date first...</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="purpose" class="form-label">Purpose</label>
                        <textarea id="purpose" name="purpose" class="form-control" rows="3" required 
                                  minlength="10" maxlength="500" placeholder="Please describe the reason for your visit"></textarea>
                        <small class="form-text text-muted">Minimum 10 characters, maximum 500 characters.</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit Request</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Appointment Details Modal -->
<div class="modal fade" id="appointmentDetailsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Appointment Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <dl class="row">
                    <dt class="col-sm-4">Doctor</dt>
                    <dd class="col-sm-8" id="detailsDoctor"></dd>
                    <dt class="col-sm-4">Date & Time</dt>
                    <dd class="col-sm-8" id="detailsDateTime"></dd>
                    <dt class="col-sm-4">Status</dt>
                    <dd class="col-sm-8" id="detailsStatus"></dd>
                    <dt class="col-sm-4">Patient</dt>
                    <dd class="col-sm-8" id="detailsPatient"></dd>
                    <dt class="col-sm-4">Purpose</dt>
                    <dd class="col-sm-8" id="detailsPurpose"></dd>
                </dl>
            </div>
            <div class="modal-footer" id="detailsModalFooter">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js'></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
                initialView: 'timeGridWeek',
                slotMinTime: '09:00:00',
                slotMaxTime: '17:00:00',
                slotDuration: '00:30:00',
                allDaySlot: false,
                validRange: {
                    start: '@minDate',
                    end: '@maxDate'
                },
                events: @Json.Serialize(Model.DoctorSchedules.SelectMany(d => d.TimeSlots.Select(t => new {
                    id = t.Id,
                    title = t.IsAvailable ? "Available" : t.PatientName,
                    start = t.StartTime,
                    end = t.EndTime,
                    className = t.AppointmentStatus.ToLower(),
                    extendedProps = new {
                        doctorId = d.DoctorId,
                        doctorName = d.DoctorName,
                        status = t.AppointmentStatus,
                        purpose = t.Purpose,
                        patientName = t.PatientName
                    }
                }))),
                eventClick: function(info) {
                    showAppointmentDetails(info.event);
                }
            });
            calendar.render();

            // Handle appointment request form
            $('#appointmentRequestForm').on('submit', function(e) {
                e.preventDefault();
                
                var submitButton = $(this).find('button[type="submit"]');
                submitButton.prop('disabled', true);
                $('#errorMessage').hide();
                
                var date = $('#appointmentDate').val();
                var time = $('#timeSlot').val();
                var doctorId = $('#doctorId').val();
                var purpose = $('#purpose').val();
                
                // Validate all required fields
                if (!doctorId || !date || !time || !purpose) {
                    $('#errorMessage').text('Please fill in all required fields').show();
                    submitButton.prop('disabled', false);
                    return;
                }
                
                // Parse the time from format "HH:mm - HH:mm" to get start time
                var startTime = time.split(' - ')[0];
                
                // Combine date and time
                var timeSlot = new Date(date + 'T' + startTime);
                
                // Check if the selected date is valid
                var selectedDate = new Date(date);
                var minDate = new Date('@minDate');
                var maxDate = new Date('@maxDate');
                
                if (selectedDate < minDate || selectedDate > maxDate) {
                    $('#errorMessage').text('Please select a date between tomorrow and 3 months from now').show();
                    submitButton.prop('disabled', false);
                    return;
                }
                
                var formData = {
                    doctorId: doctorId,
                    timeSlot: timeSlot.toISOString(),
                    purpose: purpose
                };

                console.log('Sending appointment request:', formData);

                $.ajax({
                    url: '/api/appointments/request',
                    method: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    data: JSON.stringify(formData),
                    success: function(response) {
                        console.log('Appointment request successful:', response);
                        $('#appointmentRequestModal').modal('hide');
                        location.reload();
                    },
                    error: function(xhr, status, error) {
                        submitButton.prop('disabled', false);
                        console.error('Appointment request failed:', {
                            status: status,
                            error: error,
                            response: xhr.responseText
                        });
                        
                        var errorMessage = 'Failed to request appointment. Please try again.';
                        
                        try {
                            if (xhr.responseJSON) {
                                if (xhr.responseJSON.errors) {
                                    errorMessage = Object.values(xhr.responseJSON.errors)
                                        .flat()
                                        .join('\n');
                                } else if (xhr.responseJSON.message) {
                                    errorMessage = xhr.responseJSON.message;
                                } else if (typeof xhr.responseJSON === 'string') {
                                    errorMessage = xhr.responseJSON;
                                }
                            } else if (xhr.responseText) {
                                errorMessage = xhr.responseText;
                            }
                        } catch (e) {
                            console.error('Error parsing error response:', e);
                        }
                        
                        $('#errorMessage').html(errorMessage).show();
                    }
                });
            });

            // Load time slots when date is selected
            $('#appointmentDate').on('change', function() {
                var doctorId = $('#doctorId').val();
                var date = $(this).val();
                var timeSlotSelect = $('#timeSlot');
                
                timeSlotSelect.empty();
                timeSlotSelect.append($('<option>', {
                    value: '',
                    text: 'Select time slot...'
                }));
                
                if (doctorId && date) {
                    $('#errorMessage').hide();
                    console.log('Fetching time slots for:', { doctorId, date });
                    
                    $.get('/api/appointments/timeslots', { doctorId: doctorId, date: date })
                        .done(function(slots) {
                            console.log('Available time slots:', slots);
                            if (slots && slots.length > 0) {
                                slots.forEach(function(slot) {
                                    timeSlotSelect.append($('<option>', {
                                        value: slot.text,
                                        text: slot.text
                                    }));
                                });
                            } else {
                                timeSlotSelect.append($('<option>', {
                                    value: '',
                                    text: 'No available slots for this date'
                                }));
                            }
                        })
                        .fail(function(xhr, status, error) {
                            console.error('Failed to load time slots:', {
                                status: status,
                                error: error,
                                response: xhr.responseText
                            });
                            $('#errorMessage').text('Failed to load time slots. Please try again.').show();
                        });
                }
            });

            // Also trigger time slot load when doctor changes
            $('#doctorId').on('change', function() {
                if ($('#appointmentDate').val()) {
                    $('#appointmentDate').trigger('change');
                }
            });

            // Clear form when modal is hidden
            $('#appointmentRequestModal').on('hidden.bs.modal', function() {
                $('#appointmentRequestForm')[0].reset();
                $('#errorMessage').hide();
            });
        });

        function showAppointmentDetails(event) {
            const modal = new bootstrap.Modal(document.getElementById('appointmentDetailsModal'));
            document.getElementById('detailsDoctor').textContent = event.extendedProps.doctorName;
            document.getElementById('detailsDateTime').textContent = `${event.start.toLocaleString()} - ${event.end.toLocaleString()}`;
            document.getElementById('detailsStatus').textContent = event.extendedProps.status;
            document.getElementById('detailsPatient').textContent = event.extendedProps.patientName || 'N/A';
            document.getElementById('detailsPurpose').textContent = event.extendedProps.purpose || 'N/A';

            const footer = document.getElementById('detailsModalFooter');
            footer.innerHTML = '<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>';

            if (event.extendedProps.status === 'Requested' && '@Model.UserRole' === 'Doctor') {
                const confirmBtn = document.createElement('button');
                confirmBtn.className = 'btn btn-success';
                confirmBtn.textContent = 'Confirm Appointment';
                confirmBtn.onclick = () => confirmAppointment(event.id);
                footer.appendChild(confirmBtn);
            }

            if (['Requested', 'Confirmed'].includes(event.extendedProps.status)) {
                const cancelBtn = document.createElement('button');
                cancelBtn.className = 'btn btn-danger';
                cancelBtn.textContent = 'Cancel Appointment';
                cancelBtn.onclick = () => cancelAppointment(event.id);
                footer.appendChild(cancelBtn);
            }

            modal.show();
        }

        async function confirmAppointment(appointmentId) {
            if (confirm('Are you sure you want to confirm this appointment?')) {
                try {
                    const response = await fetch(`/api/appointments/${appointmentId}/confirm`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to confirm appointment');
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            }
        }

        async function cancelAppointment(appointmentId) {
            if (confirm('Are you sure you want to cancel this appointment?')) {
                try {
                    const response = await fetch(`/api/appointments/${appointmentId}/cancel`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to cancel appointment');
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            }
        }
    </script>
}

@section Styles {
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css' rel='stylesheet' />
    <style>
        .fc-event.available {
            background-color: #28a745;
            border-color: #28a745;
        }
        .fc-event.requested {
            background-color: #ffc107;
            border-color: #ffc107;
            color: #000;
        }
        .fc-event.confirmed {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        .fc-event.cancelled {
            background-color: #dc3545;
            border-color: #dc3545;
        }
        .legend {
            margin-bottom: 1rem;
        }
        .legend .badge {
            margin-right: 1rem;
            padding: 0.5rem 1rem;
        }
    </style>
} 